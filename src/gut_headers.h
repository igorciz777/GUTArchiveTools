/**
 * Magic numbers for files used by Genki
*/

const unsigned char UCL_MAGIC[8] = {0x00, 0xe9, 0x55, 0x43, 0x4c, 0xff, 0x01, 0x1a};
const unsigned char XVI[8] = {0x30, 0x49, 0x56, 0x58, 0x30, 0x30, 0x2E, 0x31};
const unsigned char TIM2[4] = {0x54, 0x49, 0x4D, 0x32};
const unsigned char SQ[24] = {0x49, 0x45, 0x43, 0x53, 0x73, 0x72, 0x65, 0x56, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x49, 0x45, 0x43, 0x53, 0x75, 0x71, 0x65, 0x53};
const unsigned char HD[24] = {0x49, 0x45, 0x43, 0x53, 0x73, 0x72, 0x65, 0x56, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x49, 0x45, 0x43, 0x53, 0x64, 0x61, 0x65, 0x48};
const unsigned char BIN[17] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
const unsigned char BD[16] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
const unsigned char BD_2[16] = {0x00, 0x07, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77};
const unsigned char XPR2[4] = {0x58, 0x50, 0x52, 0x32};
const unsigned char TX2D[4] = {0x54, 0x58, 0x32, 0x44};

const unsigned char GIM[4] = {0x4D, 0x49, 0x47, 0x2E};
const unsigned char GMO[4] = {0x4F, 0x4D, 0x47, 0x2E};
const unsigned char GXT[4] = {0x47, 0x58, 0x54, 0x00};
const unsigned char GIM_BIG[4] = {0x2E, 0x47, 0x49, 0x4D};
const unsigned char GMO_BIG[4] = {0x2E, 0x47, 0x4D, 0x4F};
const unsigned char GXT_BIG[4] = {0x00, 0x54, 0x58, 0x47};
const unsigned char XMD_BIG[4] = {0x58, 0x4D, 0x44, 0x00};
const unsigned char XFN_BIG[4] = {0xFF, 0xAA, 0xFF, 0xAA};
const unsigned char XPU_BIG[3] = {0x10, 0x2A, 0x0E};
const unsigned char DOC_BIG[4] = {0x44, 0x4F, 0x43, 0x00};
const unsigned char DNBW_BIG[4] = {0x44, 0x4E, 0x42, 0x57};
const unsigned char KBDS_BIG[4] = {0x4B, 0x42, 0x44, 0x53};

const unsigned char DDS[4] = {0x44, 0x44, 0x53, 0x20};
const unsigned char VAG[4] = {0x56, 0x41, 0x47, 0x70};
const unsigned char HIDE[4] = {0x45, 0x44, 0x49, 0x48};
const unsigned char GINF[4] = {0x46, 0x4E, 0x49, 0x47};

const unsigned char PNG[8] = {0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A};
const unsigned char JPG[3] = {0xFF, 0xD8, 0xFF};
const unsigned char BMP[2] = {0x42, 0x4D};
const unsigned char GIF[3] = {0x47, 0x49, 0x46};
const unsigned char TGA[18] = {0x54, 0x52 ,0x55 ,0x45 ,0x56 ,0x49 ,0x53 ,0x49 ,0x4F ,0x4E ,0x2D ,0x58 ,0x46 ,0x49 ,0x4C ,0x45 ,0x2E ,0x00};

/*not sure about endian of this one, found in c1gp demo*/
const unsigned char BSPR[4] = {0x52, 0x50, 0x53, 0x42};

/*found in txr3*/
const unsigned char CLT2[4] = {0x43, 0x4C, 0x54, 0x32};


typedef struct
{
    const char extension[16];
    const unsigned char *magic;
    size_t magic_size;
} file_extension;

const file_extension file_extensions[] = {
    {"tm2", TIM2, 4},
    {"sq", SQ, 24},
    {"hd", HD, 24},
    {"bin", BIN, 17},
    {"bd", BD, 16},
    {"bd", BD_2, 16},
    {"xpr", XPR2, 4},
    {"txd", TX2D, 4},
    {"gim", GIM, 4},
    {"gmo", GMO, 4},
    {"gxt", GXT, 4},
    {"gim", GIM_BIG, 4},
    {"gmo", GMO_BIG, 4},
    {"gxt", GXT_BIG, 4},
    {"xmd", XMD_BIG, 4},
    {"xfn", XFN_BIG, 4},
    {"xpu", XPU_BIG, 3},
    {"doc", DOC_BIG, 4},
    {"xwb", DNBW_BIG, 4},
    {"xsb", KBDS_BIG, 4},
    {"hide", HIDE, 4},
    {"dds", DDS, 4},
    {"vag", VAG, 4},
    {"ginf", GINF, 4},
    {"png", PNG, 8},
    {"jpg", JPG, 3},
    {"bmp", BMP, 2},
    {"gif", GIF, 3},
    {"tga", TGA, 18},
    {"bspr", BSPR, 4},
    {"clt", CLT2, 4},
    {"xmdl", XVI, 8}
};

const char *find_file_extension_header(const char *file_header)
{
    for (long long unsigned int i = 0; i < sizeof(file_extensions) / sizeof(file_extension); i++)
    {
        if (memcmp(file_header, file_extensions[i].magic, file_extensions[i].magic_size) == 0)
        {
            return file_extensions[i].extension;
        }
    }
    return "bin";
}

const char *find_file_extension_footer(const char *file_footer, uint32_t footer_size)
{
    char *footer_ptr = (char *)file_footer;
    for (long long unsigned int i = 0; i < sizeof(file_extensions) / sizeof(file_extension); i++)
    {
        if (memcmp(footer_ptr + (footer_size - file_extensions[i].magic_size), file_extensions[i].magic, file_extensions[i].magic_size) == 0)
        {
            return file_extensions[i].extension;
        }
    }
    return "bin";
}